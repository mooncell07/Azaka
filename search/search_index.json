{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>HI :&gt; This is a WIP Documentation for Azaka, i am still working on adding a guide and fixing issues here</p>"},{"location":"Azaka/client/","title":"Client","text":""},{"location":"Azaka/client/#azaka.client.Client","title":"<code> azaka.client.Client        </code>","text":"<p>Client class for interacting with the VNDB API.</p> Source code in <code>azaka/client.py</code> <pre><code>class Client:\n    \"\"\"\n    Client class for interacting with the VNDB API.\n    \"\"\"\n\n    __slots__ = (\"cs\", \"token\")\n\n    def __init__(self, token: t.Optional[str] = None) -&gt; None:\n        \"\"\"\n        Client constructor.\n\n        Args:\n            token: VNDB API access token.\n\n        Attributes:\n            cs (Optional[aiohttp.ClientSession]): An [aiohttp.ClientSession](https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession) object.\n        \"\"\"\n        self.token = token\n        self.cs: t.Optional[aiohttp.ClientSession] = None\n\n    @property\n    def base_header(self) -&gt; t.Optional[dict[str, str]]:\n        \"\"\"\n        Returns a [dict][] containing the Authorization header.\n\n        Note:\n            If the token is not passed, it will return [None][].\n        \"\"\"\n        return {\"Authorization\": f\"token {self.token}\"} if self.token else None\n\n    async def __aenter__(self) -&gt; t.Self:\n        await self._create_cs()\n        return self\n\n    async def __aexit__(\n        self,\n        exc: t.Optional[t.Type[BaseException]],\n        exc_val: t.Optional[BaseException],\n        tb: t.Optional[TracebackType],\n    ) -&gt; None:\n        await self.close_cs()\n\n    async def get_schema(self) -&gt; dict[str, str]:\n        \"\"\"\n        Fetches the schema of the API Database.\n\n        Returns:\n            A [dict][] containing the schema of the API Database.\n        \"\"\"\n        resp = await self._request(query.SCHEMA_URL)\n        data = await self._get_data(resp)\n        return t.cast(dict[str, str], data)\n\n    async def get_stats(self) -&gt; Stats:\n        \"\"\"\n        Fetches the statistics of the API's Database.\n\n        Returns:\n            A [Stats](./models.md#azaka.models.Stats) object.\n        \"\"\"\n        resp = await self._request(query.STATS_URL)\n        data = await self._get_data(resp)\n        return Stats(**data)\n\n    async def get_auth_info(self) -&gt; AuthInfo:\n        \"\"\"\n        Validates and Returns information about the given API Token.\n\n        Returns:\n            An [AuthInfo](./models.md#azaka.models.AuthInfo) object.\n\n        Exceptions:\n            TypeError: A [TypeError][] is raised if the token is not passed.\n\n            InvalidAuthTokenError: [InvalidAuthTokenError](./exceptions.md#azaka.exceptions.InvalidAuthTokenError) is raised by the API if token is found invalid.\n        \"\"\"\n        if not self.base_header:\n            raise TypeError(\"Missing required argument 'token'\")\n        resp = await self._request(query.AUTHINFO_URL, headers=self.base_header)\n        data = await self._get_data(resp)\n        return AuthInfo(**data)\n\n    async def get_user(self, *users: str, fields: list[str] = ()) -&gt; list[User]:\n        \"\"\"\n        Looks up user(s) by id or username and returns information about them.\n\n        Args:\n            users: A variable length argument of user ids or usernames as [str][]s.\n            fields: A [list][] of fields to select.\n\n        Accepted fields for the `fields` parameter are:\n\n        - id\n\n        - username\n\n        - lengthvotes\n\n        - lengthvotes_sum\n\n        Note:\n            The `id` and `username` fields are always selected and\n            should not be explicitly specified.\n\n        Returns:\n            A [list][] of [User](./models.md#azaka.models.User) objects.\n\n        Tip:\n            Since API supports multiple user lookup using just one query, you can pass multiple\n            users like so:\n\n            `await client.get_user(\"u1\", \"u2\", .....)`\n        \"\"\"\n        url = URL(query.USER_URL).update_query({\"q\": users, \"fields\": fields})\n        resp = await self._request(url)\n        data = await self._get_data(resp)\n        user_list = []\n\n        for user in data:\n            u = (\n                User(search_term=user, **data[user], FOUND=True)\n                if data[user]\n                else User(search_term=user, FOUND=False)\n            )\n            user_list.append(u)\n        return user_list\n\n    async def execute(self, query: query.Query) -&gt; Response:\n        \"\"\"\n        Sends the query to the VNDB API.\n\n        Note:\n            This method dynamically generates the Response.results attribute.\n            Only the fields that you specify in the `select()` function at the time of building\n            the query will be present in the list of results.\n\n        Note:\n            Some fields utilize dot notation to access nested data such as `image.url`.\n            For such fields, we use the parent field name (`image` in this case) as an attribute of the\n            result, and a dictionary containing the child fields (`url` in this case)\n            as the value of the said attribute. Example:\n\n            `VN(id=\"v2\", image={\"url\": ...})`\n\n        See Also:\n            [Response](./models.md#azaka.models.Response), [Query](./query.md#azaka.query.Query)\n\n        Args:\n            query: A [Query](./query.md#azaka.query.Query) object.\n\n        Returns:\n            A [Response](./models.md#azaka.models.Response) object containing the results of the query and associated metadata.\n        \"\"\"\n        if not query._route:\n            raise TypeError(\"'route' cannot be empty\")\n\n        fn = functools.partial(\n            self._request, url=query.url, post=True, data=query.parse_body\n        )\n        resp = await (fn(headers=self.base_header) if self.base_header else fn())\n\n        data = await self._get_data(resp)\n        return build_objects(query._route, data)\n\n    async def _get_data(self, resp: aiohttp.ClientResponse) -&gt; dict[str, RespT]:\n        status = resp.status\n        if 400 &gt; status &gt;= 200 and resp.content_type == \"application/json\":\n            return await resp.json()\n        else:\n            msg = await resp.text()\n            error = EXMAP.get(status)\n            if error:\n                raise error(msg)\n            else:\n                raise AzakaException(msg, status)\n\n    async def _request(\n        self,\n        url: str | URL,\n        post: bool = False,\n        data: t.Optional[str] = None,\n        headers: t.Optional[dict[str, str]] = None,\n    ) -&gt; aiohttp.ClientResponse:\n        await self._create_cs()\n        assert self.cs\n        if post:\n            return await self.cs.post(url=url, data=data, headers=headers)\n        return await self.cs.get(url=url, headers=headers)\n\n    async def _create_cs(self) -&gt; None:\n        if not self.cs:\n            self.cs = aiohttp.ClientSession(\n                headers={\"Content-Type\": \"application/json\"}\n            )\n\n    async def close_cs(self) -&gt; None:\n        \"\"\"\n        Close the internal [aiohttp.ClientSession](https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession) object.\n        Danger:\n            You must call this method after completing the request if you are not using\n            Context Manager.\n        \"\"\"\n        if self.cs:\n            await self.cs.close()\n</code></pre>"},{"location":"Azaka/client/#azaka.client.Client.base_header","title":"<code>base_header: Optional[dict[str, str]]</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns a dict containing the Authorization header.</p> <p>Note</p> <p>If the token is not passed, it will return None.</p>"},{"location":"Azaka/client/#azaka.client.Client.__init__","title":"<code>__init__(self, token=None)</code>  <code>special</code>","text":"<p>Client constructor.</p> <p>Parameters:</p> Name Type Description Default <code>token</code> <code>Optional[str]</code> <p>VNDB API access token.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>cs</code> <code>Optional[aiohttp.ClientSession]</code> <p>An aiohttp.ClientSession object.</p> Source code in <code>azaka/client.py</code> <pre><code>def __init__(self, token: t.Optional[str] = None) -&gt; None:\n    \"\"\"\n    Client constructor.\n\n    Args:\n        token: VNDB API access token.\n\n    Attributes:\n        cs (Optional[aiohttp.ClientSession]): An [aiohttp.ClientSession](https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession) object.\n    \"\"\"\n    self.token = token\n    self.cs: t.Optional[aiohttp.ClientSession] = None\n</code></pre>"},{"location":"Azaka/client/#azaka.client.Client.get_schema","title":"<code>get_schema(self)</code>  <code>async</code>","text":"<p>Fetches the schema of the API Database.</p> <p>Returns:</p> Type Description <code>dict[str, str]</code> <p>A dict containing the schema of the API Database.</p> Source code in <code>azaka/client.py</code> <pre><code>async def get_schema(self) -&gt; dict[str, str]:\n    \"\"\"\n    Fetches the schema of the API Database.\n\n    Returns:\n        A [dict][] containing the schema of the API Database.\n    \"\"\"\n    resp = await self._request(query.SCHEMA_URL)\n    data = await self._get_data(resp)\n    return t.cast(dict[str, str], data)\n</code></pre>"},{"location":"Azaka/client/#azaka.client.Client.get_stats","title":"<code>get_stats(self)</code>  <code>async</code>","text":"<p>Fetches the statistics of the API's Database.</p> <p>Returns:</p> Type Description <code>Stats</code> <p>A Stats object.</p> Source code in <code>azaka/client.py</code> <pre><code>async def get_stats(self) -&gt; Stats:\n    \"\"\"\n    Fetches the statistics of the API's Database.\n\n    Returns:\n        A [Stats](./models.md#azaka.models.Stats) object.\n    \"\"\"\n    resp = await self._request(query.STATS_URL)\n    data = await self._get_data(resp)\n    return Stats(**data)\n</code></pre>"},{"location":"Azaka/client/#azaka.client.Client.get_auth_info","title":"<code>get_auth_info(self)</code>  <code>async</code>","text":"<p>Validates and Returns information about the given API Token.</p> <p>Returns:</p> Type Description <code>AuthInfo</code> <p>An AuthInfo object.</p> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>A TypeError is raised if the token is not passed.</p> <code>InvalidAuthTokenError</code> <p>InvalidAuthTokenError is raised by the API if token is found invalid.</p> Source code in <code>azaka/client.py</code> <pre><code>async def get_auth_info(self) -&gt; AuthInfo:\n    \"\"\"\n    Validates and Returns information about the given API Token.\n\n    Returns:\n        An [AuthInfo](./models.md#azaka.models.AuthInfo) object.\n\n    Exceptions:\n        TypeError: A [TypeError][] is raised if the token is not passed.\n\n        InvalidAuthTokenError: [InvalidAuthTokenError](./exceptions.md#azaka.exceptions.InvalidAuthTokenError) is raised by the API if token is found invalid.\n    \"\"\"\n    if not self.base_header:\n        raise TypeError(\"Missing required argument 'token'\")\n    resp = await self._request(query.AUTHINFO_URL, headers=self.base_header)\n    data = await self._get_data(resp)\n    return AuthInfo(**data)\n</code></pre>"},{"location":"Azaka/client/#azaka.client.Client.get_user","title":"<code>get_user(self, *users, *, fields=())</code>  <code>async</code>","text":"<p>Looks up user(s) by id or username and returns information about them.</p> <p>Parameters:</p> Name Type Description Default <code>users</code> <code>str</code> <p>A variable length argument of user ids or usernames as strs.</p> <code>()</code> <code>fields</code> <code>list[str]</code> <p>A list of fields to select.</p> <code>()</code> <p>Accepted fields for the <code>fields</code> parameter are:</p> <ul> <li> <p>id</p> </li> <li> <p>username</p> </li> <li> <p>lengthvotes</p> </li> <li> <p>lengthvotes_sum</p> </li> </ul> <p>Note</p> <p>The <code>id</code> and <code>username</code> fields are always selected and should not be explicitly specified.</p> <p>Returns:</p> Type Description <code>list[azaka.models.User]</code> <p>A list of User objects.</p> <p>Tip</p> <p>Since API supports multiple user lookup using just one query, you can pass multiple users like so:</p> <p><code>await client.get_user(\"u1\", \"u2\", .....)</code></p> Source code in <code>azaka/client.py</code> <pre><code>async def get_user(self, *users: str, fields: list[str] = ()) -&gt; list[User]:\n    \"\"\"\n    Looks up user(s) by id or username and returns information about them.\n\n    Args:\n        users: A variable length argument of user ids or usernames as [str][]s.\n        fields: A [list][] of fields to select.\n\n    Accepted fields for the `fields` parameter are:\n\n    - id\n\n    - username\n\n    - lengthvotes\n\n    - lengthvotes_sum\n\n    Note:\n        The `id` and `username` fields are always selected and\n        should not be explicitly specified.\n\n    Returns:\n        A [list][] of [User](./models.md#azaka.models.User) objects.\n\n    Tip:\n        Since API supports multiple user lookup using just one query, you can pass multiple\n        users like so:\n\n        `await client.get_user(\"u1\", \"u2\", .....)`\n    \"\"\"\n    url = URL(query.USER_URL).update_query({\"q\": users, \"fields\": fields})\n    resp = await self._request(url)\n    data = await self._get_data(resp)\n    user_list = []\n\n    for user in data:\n        u = (\n            User(search_term=user, **data[user], FOUND=True)\n            if data[user]\n            else User(search_term=user, FOUND=False)\n        )\n        user_list.append(u)\n    return user_list\n</code></pre>"},{"location":"Azaka/client/#azaka.client.Client.execute","title":"<code>execute(self, query)</code>  <code>async</code>","text":"<p>Sends the query to the VNDB API.</p> <p>Note</p> <p>This method dynamically generates the Response.results attribute. Only the fields that you specify in the <code>select()</code> function at the time of building the query will be present in the list of results.</p> <p>Note</p> <p>Some fields utilize dot notation to access nested data such as <code>image.url</code>. For such fields, we use the parent field name (<code>image</code> in this case) as an attribute of the result, and a dictionary containing the child fields (<code>url</code> in this case) as the value of the said attribute. Example:</p> <p><code>VN(id=\"v2\", image={\"url\": ...})</code></p> <p>See Also:     Response, Query</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Query</code> <p>A Query object.</p> required <p>Returns:</p> Type Description <code>Response</code> <p>A Response object containing the results of the query and associated metadata.</p> Source code in <code>azaka/client.py</code> <pre><code>async def execute(self, query: query.Query) -&gt; Response:\n    \"\"\"\n    Sends the query to the VNDB API.\n\n    Note:\n        This method dynamically generates the Response.results attribute.\n        Only the fields that you specify in the `select()` function at the time of building\n        the query will be present in the list of results.\n\n    Note:\n        Some fields utilize dot notation to access nested data such as `image.url`.\n        For such fields, we use the parent field name (`image` in this case) as an attribute of the\n        result, and a dictionary containing the child fields (`url` in this case)\n        as the value of the said attribute. Example:\n\n        `VN(id=\"v2\", image={\"url\": ...})`\n\n    See Also:\n        [Response](./models.md#azaka.models.Response), [Query](./query.md#azaka.query.Query)\n\n    Args:\n        query: A [Query](./query.md#azaka.query.Query) object.\n\n    Returns:\n        A [Response](./models.md#azaka.models.Response) object containing the results of the query and associated metadata.\n    \"\"\"\n    if not query._route:\n        raise TypeError(\"'route' cannot be empty\")\n\n    fn = functools.partial(\n        self._request, url=query.url, post=True, data=query.parse_body\n    )\n    resp = await (fn(headers=self.base_header) if self.base_header else fn())\n\n    data = await self._get_data(resp)\n    return build_objects(query._route, data)\n</code></pre>"},{"location":"Azaka/client/#azaka.client.Client.close_cs","title":"<code>close_cs(self)</code>  <code>async</code>","text":"<p>Close the internal aiohttp.ClientSession object.</p> <p>Danger</p> <p>You must call this method after completing the request if you are not using Context Manager.</p> Source code in <code>azaka/client.py</code> <pre><code>async def close_cs(self) -&gt; None:\n    \"\"\"\n    Close the internal [aiohttp.ClientSession](https://docs.aiohttp.org/en/stable/client_reference.html#aiohttp.ClientSession) object.\n    Danger:\n        You must call this method after completing the request if you are not using\n        Context Manager.\n    \"\"\"\n    if self.cs:\n        await self.cs.close()\n</code></pre>"},{"location":"Azaka/exceptions/","title":"Exceptions","text":""},{"location":"Azaka/exceptions/#azaka.exceptions.AzakaException","title":"<code> azaka.exceptions.AzakaException            (Exception)         </code>","text":"<p>Base Exception for Azaka.</p> <p>Attributes:</p> Name Type Description <code>msg</code> <code>str</code> <p>The error message generated by the API.</p> <code>status_code</code> <code>int</code> <p>The status code of the error.</p> Source code in <code>azaka/exceptions.py</code> <pre><code>class AzakaException(Exception):\n    \"\"\"\n    Base Exception for Azaka.\n\n    Attributes:\n        msg str: The error message generated by the API.\n        status_code int: The status code of the error.\n    \"\"\"\n    __slots__ = (\"msg\", \"status_code\")\n\n    def __init__(self, msg: str, status_code: int) -&gt; None:\n        self.msg = msg\n        self.status_code = status_code\n        super().__init__(msg)\n</code></pre>"},{"location":"Azaka/exceptions/#azaka.exceptions.InvalidRequestBodyError","title":"<code> azaka.exceptions.InvalidRequestBodyError            (AzakaException)         </code>","text":"<p>Raised when the request body is invalid. API generates the error message which indicates the issue with the request body.</p> <p>Status code: <code>400</code></p> Source code in <code>azaka/exceptions.py</code> <pre><code>class InvalidRequestBodyError(AzakaException):\n    \"\"\"\n    Raised when the request body is invalid. API generates the error message which indicates\n    the issue with the request body.\n\n    Status code: `400`\n    \"\"\"\n    def __init__(self, msg: str) -&gt; None:\n        super().__init__(msg, STATUS_INVALID_REQUEST_BODY)\n</code></pre>"},{"location":"Azaka/exceptions/#azaka.exceptions.InvalidAuthTokenError","title":"<code> azaka.exceptions.InvalidAuthTokenError            (AzakaException)         </code>","text":"<p>Raised when the Authentication Token is invalid.</p> <p>Status code: <code>401</code></p> Source code in <code>azaka/exceptions.py</code> <pre><code>class InvalidAuthTokenError(AzakaException):\n    \"\"\"\n    Raised when the Authentication Token is invalid.\n\n    Status code: `401`\n    \"\"\"\n    def __init__(self, msg: str) -&gt; None:\n        super().__init__(msg, STATUS_INVALID_AUTH_TOKEN)\n</code></pre>"},{"location":"Azaka/exceptions/#azaka.exceptions.NotFoundError","title":"<code> azaka.exceptions.NotFoundError            (AzakaException)         </code>","text":"<p>Raised when the API path or HTTP method is invalid.</p> <p>Status code: <code>404</code></p> Source code in <code>azaka/exceptions.py</code> <pre><code>class NotFoundError(AzakaException):\n    \"\"\"\n    Raised when the API path or HTTP method is invalid.\n\n    Status code: `404`\n    \"\"\"\n    def __init__(self, msg: str) -&gt; None:\n        super().__init__(msg, STATUS_NOT_FOUND)\n</code></pre>"},{"location":"Azaka/exceptions/#azaka.exceptions.ThrottledError","title":"<code> azaka.exceptions.ThrottledError            (AzakaException)         </code>","text":"<p>Raised when we are getting rate limited by the API.</p> <p>Status code: <code>429</code></p> Source code in <code>azaka/exceptions.py</code> <pre><code>class ThrottledError(AzakaException):\n    \"\"\"\n    Raised when we are getting rate limited by the API.\n\n    Status code: `429`\n    \"\"\"\n    def __init__(self, msg: str) -&gt; None:\n        super().__init__(msg, STATUS_THROTTLED)\n</code></pre>"},{"location":"Azaka/exceptions/#azaka.exceptions.ServerError","title":"<code> azaka.exceptions.ServerError            (AzakaException)         </code>","text":"<p>Raised when the server encounters an error.</p> <p>Status code: <code>500</code></p> Source code in <code>azaka/exceptions.py</code> <pre><code>class ServerError(AzakaException):\n    \"\"\"\n    Raised when the server encounters an error.\n\n    Status code: `500`\n    \"\"\"\n    def __init__(self, msg: str) -&gt; None:\n        super().__init__(msg, STATUS_SERVER_ERROR)\n</code></pre>"},{"location":"Azaka/exceptions/#azaka.exceptions.ServerDownError","title":"<code> azaka.exceptions.ServerDownError            (AzakaException)         </code>","text":"<p>Raised when the server is down.</p> <p>Status code: <code>502</code></p> Source code in <code>azaka/exceptions.py</code> <pre><code>class ServerDownError(AzakaException):\n    \"\"\"\n    Raised when the server is down.\n\n    Status code: `502`\n    \"\"\"\n    def __init__(self, msg: str) -&gt; None:\n        super().__init__(msg, STATUS_SERVER_DOWN)\n</code></pre>"},{"location":"Azaka/models/","title":"Models","text":""},{"location":"Azaka/models/#azaka.models.Stats","title":"<code> azaka.models.Stats        </code>  <code>dataclass</code>","text":"<p>Stats dataclasses.dataclass containing statistics about the VNDB database.</p> <p>Attributes:</p> Name Type Description <code>chars</code> <code>int</code> <p>Number of character entries.</p> <code>producers</code> <code>int</code> <p>Number of producer entries.</p> <code>releases</code> <code>int</code> <p>Number of release entries.</p> <code>staff</code> <code>int</code> <p>Number of staff entries.</p> <code>tags</code> <code>int</code> <p>Number of tag entries.</p> <code>traits</code> <code>int</code> <p>Number of trait entries.</p> <code>vn</code> <code>int</code> <p>Number of visual novel entries.</p> Source code in <code>azaka/models.py</code> <pre><code>@dataclass\nclass Stats:\n    \"\"\"\n    Stats [dataclasses.dataclass][] containing statistics about the VNDB database.\n\n    Attributes:\n        chars int: Number of character entries.\n        producers int: Number of producer entries.\n        releases int: Number of release entries.\n        staff int: Number of staff entries.\n        tags int: Number of tag entries.\n        traits int: Number of trait entries.\n        vn int: Number of visual novel entries.\n    \"\"\"\n\n    chars: int\n    producers: int\n    releases: int\n    staff: int\n    tags: int\n    traits: int\n    vn: int\n</code></pre>"},{"location":"Azaka/models/#azaka.models.AuthInfo","title":"<code> azaka.models.AuthInfo        </code>  <code>dataclass</code>","text":"<p>AuthInfo dataclasses.dataclass containing information about the API Token.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>User ID in \"u123\" format.</p> <code>username</code> <code>str</code> <p>Username.</p> <code>permissions</code> <code>list[str]</code> <p>List of permissions granted to the API Token.</p> <p>Info</p> <p>There are two types of permissions:</p> <ul> <li> <p><code>listread</code>: Allows read access to private labels and entries in the user's visual novel list.</p> </li> <li> <p><code>listwrite</code>: Allows write access to the user's visual novel list.</p> </li> </ul> Source code in <code>azaka/models.py</code> <pre><code>@dataclass\nclass AuthInfo:\n    \"\"\"\n    AuthInfo [dataclasses.dataclass][] containing information about the API Token.\n\n    Attributes:\n        id str: User ID in \"u123\" format.\n        username str: Username.\n        permissions list[str]: List of permissions granted to the API Token.\n\n    Info:\n        There are two types of permissions:\n\n        - `listread`: Allows read access to private labels and entries in the user's visual novel list.\n\n        - `listwrite`: Allows write access to the user's visual novel list.\n\n    \"\"\"\n\n    id: str\n    username: str\n    permissions: list[str]\n</code></pre>"},{"location":"Azaka/models/#azaka.models.User","title":"<code> azaka.models.User        </code>  <code>dataclass</code>","text":"<p>User dataclasses.dataclass containing information about a user.</p> <p>Attributes:</p> Name Type Description <code>FOUND</code> <code>bool</code> <p>If the user was found or not.</p> <code>search_term</code> <code>str</code> <p>The search term used.</p> <code>id</code> <code>str</code> <p>User ID in \"u123\" format.</p> <code>username</code> <code>str</code> <p>Username.</p> <code>lengthvotes</code> <code>int</code> <p>Number of play time votes the user has submitted.</p> <code>lengthvotes_sum</code> <code>int</code> <p>Sum of the user's play time votes, in minutes.</p> <p>Info</p> <p>Strings that look like user IDs are not valid usernames, so the lookup is unambiguous. Usernames matching is case-insensitive.</p> Source code in <code>azaka/models.py</code> <pre><code>@dataclass\nclass User:\n    \"\"\"\n    User [dataclasses.dataclass][] containing information about a user.\n\n    Attributes:\n        FOUND bool: If the user was found or not.\n        search_term str: The search term used.\n        id str: User ID in \"u123\" format.\n        username str: Username.\n        lengthvotes int: Number of play time votes the user has submitted.\n        lengthvotes_sum int: Sum of the user's play time votes, in minutes.\n\n    Info:\n        Strings that look like user IDs are not valid usernames, so the lookup is unambiguous. Usernames matching is case-insensitive.\n    \"\"\"\n\n    FOUND: bool\n\n    search_term: str\n    id: t.Optional[str] = None\n    username: t.Optional[str] = None\n    lengthvotes: t.Optional[int] = None\n    lengthvotes_sum: t.Optional[int] = None\n</code></pre>"},{"location":"Azaka/models/#azaka.models.Response","title":"<code> azaka.models.Response        </code>  <code>dataclass</code>","text":"<p>Response dataclasses.dataclass containing the results and metadata of a query.</p> <p>Attributes:</p> Name Type Description <code>results</code> <code>list[t.NamedTuple]</code> <p>A list of nametuples dynamically created from the response representing the query results.</p> <code>more</code> <code>bool</code> <p>If there are more results. Used for pagination.</p> <code>count</code> <code>int</code> <p>Indicates the total number of entries that matched the given filters. Defaults to <code>1</code> if count is not explicitly set to true in the query.</p> <code>compact_filters</code> <code>Optional[str]</code> <p>This is a compact string representation of the filters given in the query. Defaults to <code>None</code> if <code>compact_filters</code> is not explicitly set to <code>true</code> in the query.</p> <code>normalized_filters</code> <code>list[str]</code> <p>This is a normalized JSON representation of the filters given in the query. Defaults to an <code>empty list</code> if <code>normalized_filters</code> is not explicitly set to <code>true</code> in the query.</p> Source code in <code>azaka/models.py</code> <pre><code>@dataclass\nclass Response:\n    \"\"\"\n    Response [dataclasses.dataclass][] containing the results and metadata of a query.\n\n    Attributes:\n        results list[t.NamedTuple]: A [list][] of nametuples dynamically created from the response representing the query results.\n        more bool: If there are more results. Used for pagination.\n        count int: Indicates the total number of entries that matched the given filters. Defaults to `1` if count is not explicitly set to true in the query.\n        compact_filters Optional[str]: This is a compact string representation of the filters given in the query. Defaults to `None` if `compact_filters` is not explicitly set to `true` in the query.\n        normalized_filters list[str]: This is a normalized JSON representation of the filters given in the query. Defaults to an `empty list` if `normalized_filters` is not explicitly set to `true` in the query.\n    \"\"\"\n\n    results: t.Sequence[t.NamedTuple]\n    more: bool = False\n    count: int = 1\n    compact_filters: t.Optional[str] = None\n    normalized_filters: list[str] = field(default_factory=list)\n</code></pre>"},{"location":"Azaka/paginator/","title":"Paginator","text":""},{"location":"Azaka/paginator/#azaka.paginator.Paginator","title":"<code> azaka.paginator.Paginator        </code>","text":"<p>Paginator class for starting a pagination session.</p> <p>Examples:</p> <pre><code>async def main() -&gt; None:\n    query = (select(\"id\", \"title\")\n            .frm(\"vn\")\n            .where(Node(\"olang\") == \"en\"))\n\n    async with Client() as client:\n        paginator = Paginator(\n            client, query=query, max_results_per_page=2, exit_after=3\n        )\n        async for page in paginator:\n            for vn in page.results:\n                print(vn.title)\n</code></pre> Source code in <code>azaka/paginator.py</code> <pre><code>class Paginator:\n    \"\"\"\n    Paginator class for starting a pagination session.\n\n    Example:\n        ```python\n        async def main() -&gt; None:\n            query = (select(\"id\", \"title\")\n                    .frm(\"vn\")\n                    .where(Node(\"olang\") == \"en\"))\n\n            async with Client() as client:\n                paginator = Paginator(\n                    client, query=query, max_results_per_page=2, exit_after=3\n                )\n                async for page in paginator:\n                    for vn in page.results:\n                        print(vn.title)\n\n        ```\n    \"\"\"\n\n    __slots__ = (\"client\", \"query\", \"_resp\", \"_exit_after\")\n\n    def __init__(\n        self,\n        client: Client,\n        query: Query,\n        max_results_per_page: int,\n        exit_after: t.Optional[int] = None,\n    ) -&gt; None:\n        \"\"\"\n        Paginator constructor.\n\n        Args:\n            client: The [Client](./client.md) object.\n            query: The [Query](./query.md#azaka.query.Query) object for pagination.\n            max_results_per_page: Maximum number of results per page.\n            exit_after: Exit after a certain number of pages.\n        \"\"\"\n        self.client = client\n        query._body[\"results\"] = max_results_per_page\n        self.query = query\n        self._resp: t.Optional[Response] = None\n        self._exit_after = exit_after\n\n    async def _generate(self) -&gt; Response:\n        self._resp = await self.client.execute(query=self.query)\n        return self._resp\n\n    async def next(self) -&gt; t.Optional[Response]:\n        \"\"\"\n        Progress to the next page of results.\n\n        Returns:\n            A [Response](./models.md#azaka.models.Response) object.\n        \"\"\"\n        if not self._resp:\n            return await self._generate()\n\n        if self._resp.more:\n            self.query._body[\"page\"] += 1\n            return await self._generate()\n\n        return None\n\n    async def previous(self) -&gt; t.Optional[Response]:\n        \"\"\"\n        Move back to the previous page of results.\n\n        Returns:\n            A [Response](./models.md#azaka.models.Response) object.\n        \"\"\"\n        if self.query and self.query._body[\"page\"] &gt; 1:\n            self.query._body[\"page\"] -= 1\n            return await self._generate()\n        return None\n\n    def __aiter__(self) -&gt; t.Self:\n        return self\n\n    async def __anext__(self) -&gt; Response:\n        data = await self.next()\n        if not data or self._handle_counter():\n            raise StopAsyncIteration\n\n        return data\n\n    def _handle_counter(self) -&gt; bool:\n        if self._exit_after is None:\n            return False\n        if not isinstance(self._exit_after, int) or self._exit_after &lt; 0:\n            raise ValueError(\"'exit_after' must be a positive integer\")\n        if self._exit_after == 0:\n            return True\n        self._exit_after -= 1\n        return False\n\n    def current(self) -&gt; t.Optional[Response]:\n        \"\"\"\n        Get the current page of results.\n\n        Returns:\n             A [Response](./models.md#azaka.models.Response) object.\n        \"\"\"\n        return self._resp\n\n    async def flatten(self) -&gt; list[Response]:\n        \"\"\"\n        Flatten the results of the pagination into a [list][].\n\n        Returns:\n            list[Response]: A [list][] of [Response](./models.md#azaka.models.Response) objects.\n        \"\"\"\n        return [i async for i in self]\n</code></pre>"},{"location":"Azaka/paginator/#azaka.paginator.Paginator.__init__","title":"<code>__init__(self, client, query, max_results_per_page, exit_after=None)</code>  <code>special</code>","text":"<p>Paginator constructor.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>The Client object.</p> required <code>query</code> <code>Query</code> <p>The Query object for pagination.</p> required <code>max_results_per_page</code> <code>int</code> <p>Maximum number of results per page.</p> required <code>exit_after</code> <code>Optional[int]</code> <p>Exit after a certain number of pages.</p> <code>None</code> Source code in <code>azaka/paginator.py</code> <pre><code>def __init__(\n    self,\n    client: Client,\n    query: Query,\n    max_results_per_page: int,\n    exit_after: t.Optional[int] = None,\n) -&gt; None:\n    \"\"\"\n    Paginator constructor.\n\n    Args:\n        client: The [Client](./client.md) object.\n        query: The [Query](./query.md#azaka.query.Query) object for pagination.\n        max_results_per_page: Maximum number of results per page.\n        exit_after: Exit after a certain number of pages.\n    \"\"\"\n    self.client = client\n    query._body[\"results\"] = max_results_per_page\n    self.query = query\n    self._resp: t.Optional[Response] = None\n    self._exit_after = exit_after\n</code></pre>"},{"location":"Azaka/paginator/#azaka.paginator.Paginator.next","title":"<code>next(self)</code>  <code>async</code>","text":"<p>Progress to the next page of results.</p> <p>Returns:</p> Type Description <code>Optional[azaka.models.Response]</code> <p>A Response object.</p> Source code in <code>azaka/paginator.py</code> <pre><code>async def next(self) -&gt; t.Optional[Response]:\n    \"\"\"\n    Progress to the next page of results.\n\n    Returns:\n        A [Response](./models.md#azaka.models.Response) object.\n    \"\"\"\n    if not self._resp:\n        return await self._generate()\n\n    if self._resp.more:\n        self.query._body[\"page\"] += 1\n        return await self._generate()\n\n    return None\n</code></pre>"},{"location":"Azaka/paginator/#azaka.paginator.Paginator.previous","title":"<code>previous(self)</code>  <code>async</code>","text":"<p>Move back to the previous page of results.</p> <p>Returns:</p> Type Description <code>Optional[azaka.models.Response]</code> <p>A Response object.</p> Source code in <code>azaka/paginator.py</code> <pre><code>async def previous(self) -&gt; t.Optional[Response]:\n    \"\"\"\n    Move back to the previous page of results.\n\n    Returns:\n        A [Response](./models.md#azaka.models.Response) object.\n    \"\"\"\n    if self.query and self.query._body[\"page\"] &gt; 1:\n        self.query._body[\"page\"] -= 1\n        return await self._generate()\n    return None\n</code></pre>"},{"location":"Azaka/paginator/#azaka.paginator.Paginator.current","title":"<code>current(self)</code>","text":"<p>Get the current page of results.</p> <p>Returns:</p> Type Description <code>Optional[azaka.models.Response]</code> <p>A Response object.</p> Source code in <code>azaka/paginator.py</code> <pre><code>def current(self) -&gt; t.Optional[Response]:\n    \"\"\"\n    Get the current page of results.\n\n    Returns:\n         A [Response](./models.md#azaka.models.Response) object.\n    \"\"\"\n    return self._resp\n</code></pre>"},{"location":"Azaka/paginator/#azaka.paginator.Paginator.flatten","title":"<code>flatten(self)</code>  <code>async</code>","text":"<p>Flatten the results of the pagination into a list.</p> <p>Returns:</p> Type Description <code>list[Response]</code> <p>A list of Response objects.</p> Source code in <code>azaka/paginator.py</code> <pre><code>async def flatten(self) -&gt; list[Response]:\n    \"\"\"\n    Flatten the results of the pagination into a [list][].\n\n    Returns:\n        list[Response]: A [list][] of [Response](./models.md#azaka.models.Response) objects.\n    \"\"\"\n    return [i async for i in self]\n</code></pre>"},{"location":"Azaka/query/","title":"Query","text":""},{"location":"Azaka/query/#azaka.query.Query","title":"<code> azaka.query.Query        </code>","text":"<p>Query class for building a query to be executed on the VNDB API.</p> <p>Danger</p> <p>This class is not meant to be instantiated directly but rather through the select function.</p> Source code in <code>azaka/query.py</code> <pre><code>class Query:\n    \"\"\"\n    Query class for building a query to be executed on the VNDB API.\n\n    Danger:\n        This class is not meant to be instantiated directly but rather through the [select](./query.md#azaka.query.select) function.\n    \"\"\"\n    __slots__ = (\"_route\", \"_body\")\n\n    def __init__(self, route: str = \"\", body: t.Optional[Body] = None) -&gt; None:\n        self._route = route\n        self._body: Body = body or self._defaults()\n\n    def _defaults(self) -&gt; Body:\n        return {\n            \"filters\": [],\n            \"fields\": \"id, \",\n            \"sort\": \"id\",\n            \"reverse\": False,\n            \"results\": 10,\n            \"page\": 1,\n            \"user\": None,\n            \"count\": False,\n            \"compact_filters\": False,\n            \"normalized_filters\": False,\n        }\n\n    def frm(self, route: str) -&gt; t.Self:\n        \"\"\"\n        The `frm` directive is used to specify the route of the query. \n        It comes after the [select](./query.md#azaka.query.select) function in query call chain.\n        Unlike other directives, you can't leave it empty.\n\n        tip:\n            Consult the Official VNDB API Reference to find out what routes are supported for querying.\n\n        Args:\n            route: The route of the query.\n\n        Returns:\n            The [Query](./query.md#azaka.query.Query) object.\n\n        Example:\n            ```python\n            query = select().frm(\"vn\")\n            ```\n        \"\"\"\n        self._route = clean_string(route)\n        return self\n\n    def where(self, filters: t.Optional[FT[str]] = None) -&gt; t.Self:\n        \"\"\"\n        The `where` directive is used to specify the filters for the query.\n\n        You make filters by using the [Node](./query.md#azaka.query.Node) class and running \n        comparisons (`==`, `!=` `&gt;`, `&lt;`, `&gt;=`, `&lt;=`) on it like so:\n\n        `Node(\"filter_name\") == \"value\"`\n\n        or by passing a list of conditions like how API does it:\n\n        `[\"filter_name\", \"=\", \"value\"]`\n\n        tip:\n            Consult the Official VNDB API Reference to find out what filters are supported for what\n            routes.\n\n        Args:\n            filters: A [list][] of filters or [Node](./query.md#azaka.query.Node) objects.\n\n        Returns:\n            The [Query](./query.md#azaka.query.Query) object.\n\n        Example:\n            ```python\n            # With Node object\n            query = select().frm(\"vn\").where(Node(\"id\") == \"v2002\")\n\n            # With list\n            query = select().frm(\"vn\").where([\"id\", \"=\", \"v2002\"])\n            ```\n        \"\"\"\n        if filters:\n            self._body[\"filters\"] = filters\n        return self\n\n    def sort(self, key: t.Optional[str] = None) -&gt; t.Self:\n        \"\"\"\n        The `sort` directive is used to specify the key for sorting the results. It is an\n        `optional` directive. Supported values depend on the type of data being queried.\n\n        tip:\n            Consult the Official VNDB API Reference to find out what sorting key is supported for what\n            routes.\n\n        Args:\n            key: The key for sorting the results.\n\n        Returns:\n            The [Query](./query.md#azaka.query.Query) object.\n\n        Example:\n            ```python\n            query = select(\"title\").frm(\"vn\").sort(\"title\")\n            ```\n        \"\"\"\n        if key:\n            self._body[\"sort\"] = key\n        return self\n\n    def set_flags(\n        self,\n        reverse: bool = False,\n        count: bool = False,\n        compact_filters: bool = False,\n        normalized_filters: bool = False,\n    ) -&gt; None:\n        \"\"\"\n        Used to set flags for the query.\n\n        Args:\n            reverse: Reverse the order of results.\n            count: Get the count of the results.\n            compact_filters: Request for Compact filters of the query.\n            normalized_filters: Request for Normalized Filters of the query.\n\n        Example:\n            ```python\n            query = select().frm(\"vn\").where(Node(\"id\") == \"v1\")\n            query.set_flags(reverse=True, count=True, compact_filters=True, normalized_filters=True)\n            ```\n        \"\"\"\n        self._body[\"reverse\"] = reverse\n        self._body[\"count\"] = count\n        self._body[\"compact_filters\"] = compact_filters\n        self._body[\"normalized_filters\"] = normalized_filters\n\n    @property\n    def url(self) -&gt; str:\n        \"\"\"\n        The route being used for the query.\n        \"\"\"\n        return f\"{BASE}/{self._route}\"\n\n    @property\n    def parse_body(self) -&gt; str:\n        \"\"\"\n        Returns the low level representation of the query body.\n        \"\"\"\n        if not self._body[\"fields\"]:\n            raise ValueError(\"'fields' cannot be empty.\")\n        return json.dumps(self._body)\n</code></pre>"},{"location":"Azaka/query/#azaka.query.Query.url","title":"<code>url: str</code>  <code>property</code> <code>readonly</code>","text":"<p>The route being used for the query.</p>"},{"location":"Azaka/query/#azaka.query.Query.parse_body","title":"<code>parse_body: str</code>  <code>property</code> <code>readonly</code>","text":"<p>Returns the low level representation of the query body.</p>"},{"location":"Azaka/query/#azaka.query.Query.frm","title":"<code>frm(self, route)</code>","text":"<p>The <code>frm</code> directive is used to specify the route of the query.  It comes after the select function in query call chain. Unlike other directives, you can't leave it empty.</p> <p>Tip</p> <p>Consult the Official VNDB API Reference to find out what routes are supported for querying.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>str</code> <p>The route of the query.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The Query object.</p> <p>Examples:</p> <pre><code>query = select().frm(\"vn\")\n</code></pre> Source code in <code>azaka/query.py</code> <pre><code>def frm(self, route: str) -&gt; t.Self:\n    \"\"\"\n    The `frm` directive is used to specify the route of the query. \n    It comes after the [select](./query.md#azaka.query.select) function in query call chain.\n    Unlike other directives, you can't leave it empty.\n\n    tip:\n        Consult the Official VNDB API Reference to find out what routes are supported for querying.\n\n    Args:\n        route: The route of the query.\n\n    Returns:\n        The [Query](./query.md#azaka.query.Query) object.\n\n    Example:\n        ```python\n        query = select().frm(\"vn\")\n        ```\n    \"\"\"\n    self._route = clean_string(route)\n    return self\n</code></pre>"},{"location":"Azaka/query/#azaka.query.Query.where","title":"<code>where(self, filters=None)</code>","text":"<p>The <code>where</code> directive is used to specify the filters for the query.</p> <p>You make filters by using the Node class and running  comparisons (<code>==</code>, <code>!=</code> <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>) on it like so:</p> <p><code>Node(\"filter_name\") == \"value\"</code></p> <p>or by passing a list of conditions like how API does it:</p> <p><code>[\"filter_name\", \"=\", \"value\"]</code></p> <p>Tip</p> <p>Consult the Official VNDB API Reference to find out what filters are supported for what routes.</p> <p>Parameters:</p> Name Type Description Default <code>filters</code> <code>Optional[list[Union[str, FT[T]]]]</code> <p>A list of filters or Node objects.</p> <code>None</code> <p>Returns:</p> Type Description <code>Self</code> <p>The Query object.</p> <p>Examples:</p> <pre><code># With Node object\nquery = select().frm(\"vn\").where(Node(\"id\") == \"v2002\")\n\n# With list\nquery = select().frm(\"vn\").where([\"id\", \"=\", \"v2002\"])\n</code></pre> Source code in <code>azaka/query.py</code> <pre><code>def where(self, filters: t.Optional[FT[str]] = None) -&gt; t.Self:\n    \"\"\"\n    The `where` directive is used to specify the filters for the query.\n\n    You make filters by using the [Node](./query.md#azaka.query.Node) class and running \n    comparisons (`==`, `!=` `&gt;`, `&lt;`, `&gt;=`, `&lt;=`) on it like so:\n\n    `Node(\"filter_name\") == \"value\"`\n\n    or by passing a list of conditions like how API does it:\n\n    `[\"filter_name\", \"=\", \"value\"]`\n\n    tip:\n        Consult the Official VNDB API Reference to find out what filters are supported for what\n        routes.\n\n    Args:\n        filters: A [list][] of filters or [Node](./query.md#azaka.query.Node) objects.\n\n    Returns:\n        The [Query](./query.md#azaka.query.Query) object.\n\n    Example:\n        ```python\n        # With Node object\n        query = select().frm(\"vn\").where(Node(\"id\") == \"v2002\")\n\n        # With list\n        query = select().frm(\"vn\").where([\"id\", \"=\", \"v2002\"])\n        ```\n    \"\"\"\n    if filters:\n        self._body[\"filters\"] = filters\n    return self\n</code></pre>"},{"location":"Azaka/query/#azaka.query.Query.sort","title":"<code>sort(self, key=None)</code>","text":"<p>The <code>sort</code> directive is used to specify the key for sorting the results. It is an <code>optional</code> directive. Supported values depend on the type of data being queried.</p> <p>Tip</p> <p>Consult the Official VNDB API Reference to find out what sorting key is supported for what routes.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Optional[str]</code> <p>The key for sorting the results.</p> <code>None</code> <p>Returns:</p> Type Description <code>Self</code> <p>The Query object.</p> <p>Examples:</p> <pre><code>query = select(\"title\").frm(\"vn\").sort(\"title\")\n</code></pre> Source code in <code>azaka/query.py</code> <pre><code>def sort(self, key: t.Optional[str] = None) -&gt; t.Self:\n    \"\"\"\n    The `sort` directive is used to specify the key for sorting the results. It is an\n    `optional` directive. Supported values depend on the type of data being queried.\n\n    tip:\n        Consult the Official VNDB API Reference to find out what sorting key is supported for what\n        routes.\n\n    Args:\n        key: The key for sorting the results.\n\n    Returns:\n        The [Query](./query.md#azaka.query.Query) object.\n\n    Example:\n        ```python\n        query = select(\"title\").frm(\"vn\").sort(\"title\")\n        ```\n    \"\"\"\n    if key:\n        self._body[\"sort\"] = key\n    return self\n</code></pre>"},{"location":"Azaka/query/#azaka.query.Query.set_flags","title":"<code>set_flags(self, reverse=False, count=False, compact_filters=False, normalized_filters=False)</code>","text":"<p>Used to set flags for the query.</p> <p>Parameters:</p> Name Type Description Default <code>reverse</code> <code>bool</code> <p>Reverse the order of results.</p> <code>False</code> <code>count</code> <code>bool</code> <p>Get the count of the results.</p> <code>False</code> <code>compact_filters</code> <code>bool</code> <p>Request for Compact filters of the query.</p> <code>False</code> <code>normalized_filters</code> <code>bool</code> <p>Request for Normalized Filters of the query.</p> <code>False</code> <p>Examples:</p> <pre><code>query = select().frm(\"vn\").where(Node(\"id\") == \"v1\")\nquery.set_flags(reverse=True, count=True, compact_filters=True, normalized_filters=True)\n</code></pre> Source code in <code>azaka/query.py</code> <pre><code>def set_flags(\n    self,\n    reverse: bool = False,\n    count: bool = False,\n    compact_filters: bool = False,\n    normalized_filters: bool = False,\n) -&gt; None:\n    \"\"\"\n    Used to set flags for the query.\n\n    Args:\n        reverse: Reverse the order of results.\n        count: Get the count of the results.\n        compact_filters: Request for Compact filters of the query.\n        normalized_filters: Request for Normalized Filters of the query.\n\n    Example:\n        ```python\n        query = select().frm(\"vn\").where(Node(\"id\") == \"v1\")\n        query.set_flags(reverse=True, count=True, compact_filters=True, normalized_filters=True)\n        ```\n    \"\"\"\n    self._body[\"reverse\"] = reverse\n    self._body[\"count\"] = count\n    self._body[\"compact_filters\"] = compact_filters\n    self._body[\"normalized_filters\"] = normalized_filters\n</code></pre>"},{"location":"Azaka/query/#azaka.query.Node","title":"<code> azaka.query.Node        </code>","text":"<p>The Node class acts as an abstraction over the lower level List representation of the query filters. Node constructor takes the name of the filter as an argument and provides comparison methods against the values used for filtering.</p> <p>Nodes are passed to the where directive of the Query object.</p> <p>It supports following list of predicates:</p> <ul> <li><code>==</code> (Equality): Used to fetch all entries that match the given filter value.</li> </ul> <p>Usage</p> <pre><code>Node(\"id\") == \"v2002\"\n</code></pre> <ul> <li><code>!=</code> (Inequality): Used to fetch all entries that do not match the given filter value.</li> </ul> <p>Usage</p> <pre><code>Node(\"id\") != \"v2002\"\n</code></pre> <ul> <li><code>&gt;</code> (Greater Than): Used to fetch all entries that are greater than the given filter value.</li> </ul> <p>Usage</p> <pre><code>Node(\"released\") &gt; \"2020-01-01\"\n</code></pre> <ul> <li><code>&gt;=</code> (Greater Than or Equal): Used to fetch all entries that are greater than or equal to the given filter value.</li> </ul> <p>Usage</p> <pre><code>Node(\"votecount\") &gt;= \"10\"\n</code></pre> <p>Same goes for <code>&lt;</code> (Less Than) and <code>&lt;=</code> (Less Than or Equal).</p> <p>Examples:</p> <pre><code>#https://api.vndb.org/kana#filters\n\nquery = (\n    select(\"id\", \"average\")\n    .frm(\"vn\")\n    .where(\n        AND(\n            OR(\n                Node(\"lang\") == \"en\", \n                Node(\"lang\") == \"de\",\n                Node(\"lang\") == \"fr\"\n            ),\n\n            Node(\"olang\") != \"ja\",\n\n            Node(\"release\") == AND(\n                Node(\"released\") &gt;= \"2020-01-01\",\n                Node(\"producer\") == (Node(\"id\") == \"p30\"),\n            ),\n        )\n    )\n)\n</code></pre> Source code in <code>azaka/query.py</code> <pre><code>class Node:\n    \"\"\"\n    The Node class acts as an abstraction over the lower level List representation of the query filters.\n    Node constructor takes the name of the filter as an argument and provides comparison methods against\n    the values used for filtering.\n\n    Nodes are passed to the [where](./query.md#azaka.query.Query.where) directive of the [Query](./query.md#azaka.query.Query) object.\n\n    It supports following list of predicates:\n\n    - `==` (Equality): Used to fetch all entries that match the given filter value.\n\n    Usage:\n        ```python\n        Node(\"id\") == \"v2002\"\n        ```\n    - `!=` (Inequality): Used to fetch all entries that do not match the given filter value.\n\n    Usage:\n        ```python\n        Node(\"id\") != \"v2002\"\n        ```\n\n    - `&gt;` (Greater Than): Used to fetch all entries that are greater than the given filter value.\n\n    Usage:\n        ```python\n        Node(\"released\") &gt; \"2020-01-01\"\n        ```\n\n    - `&gt;=` (Greater Than or Equal): Used to fetch all entries that are greater than or equal to the given filter value.\n\n    Usage:\n        ```python\n        Node(\"votecount\") &gt;= \"10\"\n        ```\n\n    Same goes for `&lt;` (Less Than) and `&lt;=` (Less Than or Equal).\n\n    Example:\n        ```python\n        #https://api.vndb.org/kana#filters\n\n        query = (\n            select(\"id\", \"average\")\n            .frm(\"vn\")\n            .where(\n                AND(\n                    OR(\n                        Node(\"lang\") == \"en\", \n                        Node(\"lang\") == \"de\",\n                        Node(\"lang\") == \"fr\"\n                    ),\n\n                    Node(\"olang\") != \"ja\",\n\n                    Node(\"release\") == AND(\n                        Node(\"released\") &gt;= \"2020-01-01\",\n                        Node(\"producer\") == (Node(\"id\") == \"p30\"),\n                    ),\n                )\n            )\n        )\n\n        ```\n    \"\"\"\n    __slots__ = (\"name\",)\n\n    def __init__(self, name: str) -&gt; None:\n        \"\"\"\n        Node Constructor.\n\n        Args:\n            name: The name of the filter.\n        \"\"\"\n        self.name = clean_string(name)\n\n    def guard(self, value: object) -&gt; t.TypeGuard[str | FT[str]]:\n        return isinstance(value, (str, list))\n\n    def _fmt(self, op: str, val: str | FT[str]) -&gt; FT[str]:\n        return [self.name, op, val]\n\n    def __eq__(self, val: object):\n        if self.guard(val):\n            return self._fmt(\"=\", val)\n\n    def __ne__(self, val: object):\n        if self.guard(val):\n            return self._fmt(\"!=\", val)\n\n    def __gt__(self, val: object):\n        if self.guard(val):\n            return self._fmt(\"&gt;\", val)\n\n    def __ge__(self, val: object):\n        if self.guard(val):\n            return self._fmt(\"&gt;=\", val)\n\n    def __lt__(self, val: object):\n        if self.guard(val):\n            return self._fmt(\"&lt;\", val)\n\n    def __le__(self, val: object):\n        if self.guard(val):\n            return self._fmt(\"&lt;=\", val)\n</code></pre>"},{"location":"Azaka/query/#azaka.query.Node.__init__","title":"<code>__init__(self, name)</code>  <code>special</code>","text":"<p>Node Constructor.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the filter.</p> required Source code in <code>azaka/query.py</code> <pre><code>def __init__(self, name: str) -&gt; None:\n    \"\"\"\n    Node Constructor.\n\n    Args:\n        name: The name of the filter.\n    \"\"\"\n    self.name = clean_string(name)\n</code></pre>"},{"location":"Azaka/query/#azaka.query.select","title":"<code>azaka.query.select(*fields)</code>","text":"<p>The <code>select</code> function is used to specify the fields to be returned in the query results. In the Query call chain, it must be the first function to be called. If no fields are specified, the <code>id</code> field is used by default.</p> <p>Tip</p> <p>Consult the Official VNDB API Reference to find out what fields are supported for what routes.</p> <p>Parameters:</p> Name Type Description Default <code>fields</code> <code>str</code> <p>The fields that you want to fetch in the query results.</p> <code>()</code> <p>Returns:</p> Type Description <code>Query</code> <p>The Query object.</p> <p>Examples:</p> <pre><code>query = select(\"id\", \"title\").frm(\"vn\")\n</code></pre> Source code in <code>azaka/query.py</code> <pre><code>def select(*fields: str) -&gt; Query:\n    \"\"\"\n    The `select` function is used to specify the fields to be returned in the query results.\n    In the Query call chain, it must be the first function to be called. If no fields are specified,\n    the `id` field is used by default.\n\n    tip:\n        Consult the Official VNDB API Reference to find out what fields are supported for what\n        routes.\n\n    Args:\n        fields: The fields that you want to fetch in the query results.\n\n    Returns:\n        The [Query](./query.md#azaka.query.Query) object.\n\n    Example:\n        ```python\n        query = select(\"id\", \"title\").frm(\"vn\")\n        ```\n    \"\"\"\n    query = Query()\n    if fields:\n        query._body[\"fields\"] += \", \".join([clean_string(i) for i in fields])\n    else:\n        query._body[\"fields\"] = \"id\"\n    return query\n</code></pre>"},{"location":"Azaka/query/#azaka.query.AND","title":"<code>azaka.query.AND(*args)</code>","text":"<p>The <code>AND</code> function is used to combine multiple Nodes in a query. Only those results are returned that satisfy ALL the conditions.</p> <p>Note</p> <p>This function uses Prefix Notation.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list[Union[str, FT[T]]]</code> <p>A variable length argument of all the Nodes to be combined.</p> <code>()</code> <p>Returns:</p> Type Description <code>list[Union[str, FT[T]]]</code> <p>A list of Nodes combined using the <code>and</code> operator.</p> <p>Examples:</p> <pre><code>AND(\n    Node(\"id\") &gt;\"v2002\",\n    Node(\"lang\") == \"en\",\n    Node(\"olang\") != \"ja\",\n)\n</code></pre> Source code in <code>azaka/query.py</code> <pre><code>def AND(*args: FT[str]) -&gt; FT[str]:\n    \"\"\"\n    The `AND` function is used to combine multiple [Node](./query.md#azaka.query.Node)s in a query. Only those results are returned\n    that satisfy ALL the conditions.\n\n    Note:\n        This function uses Prefix Notation.\n\n    Args:\n        args: A variable length argument of all the [Node](./query.md#azaka.query.Node)s to be combined.\n\n    Returns:\n        A [list][] of [Node](./query.md#azaka.query.Node)s combined using the `and` operator.\n\n    Example:\n        ```python\n        AND(\n            Node(\"id\") &gt;\"v2002\",\n            Node(\"lang\") == \"en\",\n            Node(\"olang\") != \"ja\",\n        )\n        ```\n    \"\"\"\n    return [\"and\", *args]\n</code></pre>"},{"location":"Azaka/query/#azaka.query.OR","title":"<code>azaka.query.OR(*args)</code>","text":"<p>The <code>OR</code> function is used to combine multiple Nodes in a query. All those results are returned that satisfy ANY of the conditions.</p> <p>Note</p> <p>This function uses Prefix Notation.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>list[Union[str, FT[T]]]</code> <p>A variable length argument of all the Nodes to be combined.</p> <code>()</code> <p>Returns:</p> Type Description <code>list[Union[str, FT[T]]]</code> <p>A list of Nodes combined using the <code>or</code> operator.</p> <p>Examples:</p> <pre><code>OR(\n    Node(\"id\") &gt;\"v2002\",\n    Node(\"lang\") == \"en\",\n    Node(\"olang\") != \"ja\",\n)\n</code></pre> Source code in <code>azaka/query.py</code> <pre><code>def OR(*args: FT[str]) -&gt; FT[str]:\n    \"\"\"\n    The `OR` function is used to combine multiple [Node](./query.md#azaka.query.Node)s in a query.\n    All those results are returned that satisfy ANY of the conditions.\n\n    Note:\n        This function uses Prefix Notation.\n\n    Args:\n        args: A variable length argument of all the [Node](./query.md#azaka.query.Node)s to be combined.\n\n    Returns:\n        A [list][] of [Node](./query.md#azaka.query.Node)s combined using the `or` operator.\n\n    Example:\n        ```python\n        OR(\n            Node(\"id\") &gt;\"v2002\",\n            Node(\"lang\") == \"en\",\n            Node(\"olang\") != \"ja\",\n        )\n        ```\n    \"\"\"\n    return [\"or\", *args]\n</code></pre>"}]}